// Code generated by mockery v2.53.5. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// SendBatchNotification provides a mock function with given fields: ctx, tokens, title, body, data
func (_m *MockNotificationService) SendBatchNotification(ctx context.Context, tokens []string, title string, body string, data map[string]string) (int, int, []string, error) {
	ret := _m.Called(ctx, tokens, title, body, data)

	if len(ret) == 0 {
		panic("no return value specified for SendBatchNotification")
	}

	var r0 int
	var r1 int
	var r2 []string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, string, map[string]string) (int, int, []string, error)); ok {
		return rf(ctx, tokens, title, body, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, string, map[string]string) int); ok {
		r0 = rf(ctx, tokens, title, body, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string, string, map[string]string) int); ok {
		r1 = rf(ctx, tokens, title, body, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, string, string, map[string]string) []string); ok {
		r2 = rf(ctx, tokens, title, body, data)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, []string, string, string, map[string]string) error); ok {
		r3 = rf(ctx, tokens, title, body, data)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockNotificationService_SendBatchNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatchNotification'
type MockNotificationService_SendBatchNotification_Call struct {
	*mock.Call
}

// SendBatchNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens []string
//   - title string
//   - body string
//   - data map[string]string
func (_e *MockNotificationService_Expecter) SendBatchNotification(ctx interface{}, tokens interface{}, title interface{}, body interface{}, data interface{}) *MockNotificationService_SendBatchNotification_Call {
	return &MockNotificationService_SendBatchNotification_Call{Call: _e.mock.On("SendBatchNotification", ctx, tokens, title, body, data)}
}

func (_c *MockNotificationService_SendBatchNotification_Call) Run(run func(ctx context.Context, tokens []string, title string, body string, data map[string]string)) *MockNotificationService_SendBatchNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(string), args[3].(string), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockNotificationService_SendBatchNotification_Call) Return(successCount int, failureCount int, invalidTokens []string, err error) *MockNotificationService_SendBatchNotification_Call {
	_c.Call.Return(successCount, failureCount, invalidTokens, err)
	return _c
}

func (_c *MockNotificationService_SendBatchNotification_Call) RunAndReturn(run func(context.Context, []string, string, string, map[string]string) (int, int, []string, error)) *MockNotificationService_SendBatchNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendSingleNotification provides a mock function with given fields: ctx, token, title, body, data
func (_m *MockNotificationService) SendSingleNotification(ctx context.Context, token string, title string, body string, data map[string]string) error {
	ret := _m.Called(ctx, token, title, body, data)

	if len(ret) == 0 {
		panic("no return value specified for SendSingleNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]string) error); ok {
		r0 = rf(ctx, token, title, body, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_SendSingleNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSingleNotification'
type MockNotificationService_SendSingleNotification_Call struct {
	*mock.Call
}

// SendSingleNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - title string
//   - body string
//   - data map[string]string
func (_e *MockNotificationService_Expecter) SendSingleNotification(ctx interface{}, token interface{}, title interface{}, body interface{}, data interface{}) *MockNotificationService_SendSingleNotification_Call {
	return &MockNotificationService_SendSingleNotification_Call{Call: _e.mock.On("SendSingleNotification", ctx, token, title, body, data)}
}

func (_c *MockNotificationService_SendSingleNotification_Call) Run(run func(ctx context.Context, token string, title string, body string, data map[string]string)) *MockNotificationService_SendSingleNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockNotificationService_SendSingleNotification_Call) Return(_a0 error) *MockNotificationService_SendSingleNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_SendSingleNotification_Call) RunAndReturn(run func(context.Context, string, string, string, map[string]string) error) *MockNotificationService_SendSingleNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

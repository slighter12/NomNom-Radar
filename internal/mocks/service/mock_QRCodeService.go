// Code generated by mockery v2.53.5. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockQRCodeService is an autogenerated mock type for the QRCodeService type
type MockQRCodeService struct {
	mock.Mock
}

type MockQRCodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQRCodeService) EXPECT() *MockQRCodeService_Expecter {
	return &MockQRCodeService_Expecter{mock: &_m.Mock}
}

// GenerateSubscriptionQR provides a mock function with given fields: merchantID
func (_m *MockQRCodeService) GenerateSubscriptionQR(merchantID uuid.UUID) ([]byte, error) {
	ret := _m.Called(merchantID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSubscriptionQR")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]byte, error)); ok {
		return rf(merchantID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []byte); ok {
		r0 = rf(merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQRCodeService_GenerateSubscriptionQR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSubscriptionQR'
type MockQRCodeService_GenerateSubscriptionQR_Call struct {
	*mock.Call
}

// GenerateSubscriptionQR is a helper method to define mock.On call
//   - merchantID uuid.UUID
func (_e *MockQRCodeService_Expecter) GenerateSubscriptionQR(merchantID interface{}) *MockQRCodeService_GenerateSubscriptionQR_Call {
	return &MockQRCodeService_GenerateSubscriptionQR_Call{Call: _e.mock.On("GenerateSubscriptionQR", merchantID)}
}

func (_c *MockQRCodeService_GenerateSubscriptionQR_Call) Run(run func(merchantID uuid.UUID)) *MockQRCodeService_GenerateSubscriptionQR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockQRCodeService_GenerateSubscriptionQR_Call) Return(_a0 []byte, _a1 error) *MockQRCodeService_GenerateSubscriptionQR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQRCodeService_GenerateSubscriptionQR_Call) RunAndReturn(run func(uuid.UUID) ([]byte, error)) *MockQRCodeService_GenerateSubscriptionQR_Call {
	_c.Call.Return(run)
	return _c
}

// ParseSubscriptionQR provides a mock function with given fields: qrData
func (_m *MockQRCodeService) ParseSubscriptionQR(qrData string) (uuid.UUID, error) {
	ret := _m.Called(qrData)

	if len(ret) == 0 {
		panic("no return value specified for ParseSubscriptionQR")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uuid.UUID, error)); ok {
		return rf(qrData)
	}
	if rf, ok := ret.Get(0).(func(string) uuid.UUID); ok {
		r0 = rf(qrData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(qrData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQRCodeService_ParseSubscriptionQR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseSubscriptionQR'
type MockQRCodeService_ParseSubscriptionQR_Call struct {
	*mock.Call
}

// ParseSubscriptionQR is a helper method to define mock.On call
//   - qrData string
func (_e *MockQRCodeService_Expecter) ParseSubscriptionQR(qrData interface{}) *MockQRCodeService_ParseSubscriptionQR_Call {
	return &MockQRCodeService_ParseSubscriptionQR_Call{Call: _e.mock.On("ParseSubscriptionQR", qrData)}
}

func (_c *MockQRCodeService_ParseSubscriptionQR_Call) Run(run func(qrData string)) *MockQRCodeService_ParseSubscriptionQR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockQRCodeService_ParseSubscriptionQR_Call) Return(_a0 uuid.UUID, _a1 error) *MockQRCodeService_ParseSubscriptionQR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQRCodeService_ParseSubscriptionQR_Call) RunAndReturn(run func(string) (uuid.UUID, error)) *MockQRCodeService_ParseSubscriptionQR_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQRCodeService creates a new instance of MockQRCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQRCodeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQRCodeService {
	mock := &MockQRCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

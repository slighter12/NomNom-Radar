// Code generated by mockery v2.53.5. DO NOT EDIT.

package repository

import (
	context "context"
	entity "radar/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockDeviceRepository is an autogenerated mock type for the DeviceRepository type
type MockDeviceRepository struct {
	mock.Mock
}

type MockDeviceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceRepository) EXPECT() *MockDeviceRepository_Expecter {
	return &MockDeviceRepository_Expecter{mock: &_m.Mock}
}

// CreateDevice provides a mock function with given fields: ctx, device
func (_m *MockDeviceRepository) CreateDevice(ctx context.Context, device *entity.UserDevice) error {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserDevice) error); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeviceRepository_CreateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevice'
type MockDeviceRepository_CreateDevice_Call struct {
	*mock.Call
}

// CreateDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - device *entity.UserDevice
func (_e *MockDeviceRepository_Expecter) CreateDevice(ctx interface{}, device interface{}) *MockDeviceRepository_CreateDevice_Call {
	return &MockDeviceRepository_CreateDevice_Call{Call: _e.mock.On("CreateDevice", ctx, device)}
}

func (_c *MockDeviceRepository_CreateDevice_Call) Run(run func(ctx context.Context, device *entity.UserDevice)) *MockDeviceRepository_CreateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.UserDevice))
	})
	return _c
}

func (_c *MockDeviceRepository_CreateDevice_Call) Return(_a0 error) *MockDeviceRepository_CreateDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceRepository_CreateDevice_Call) RunAndReturn(run func(context.Context, *entity.UserDevice) error) *MockDeviceRepository_CreateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDevice provides a mock function with given fields: ctx, id
func (_m *MockDeviceRepository) DeleteDevice(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeviceRepository_DeleteDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDevice'
type MockDeviceRepository_DeleteDevice_Call struct {
	*mock.Call
}

// DeleteDevice is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockDeviceRepository_Expecter) DeleteDevice(ctx interface{}, id interface{}) *MockDeviceRepository_DeleteDevice_Call {
	return &MockDeviceRepository_DeleteDevice_Call{Call: _e.mock.On("DeleteDevice", ctx, id)}
}

func (_c *MockDeviceRepository_DeleteDevice_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockDeviceRepository_DeleteDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDeviceRepository_DeleteDevice_Call) Return(_a0 error) *MockDeviceRepository_DeleteDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceRepository_DeleteDevice_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDeviceRepository_DeleteDevice_Call {
	_c.Call.Return(run)
	return _c
}

// FindActiveDevicesByUser provides a mock function with given fields: ctx, userID
func (_m *MockDeviceRepository) FindActiveDevicesByUser(ctx context.Context, userID uuid.UUID) ([]*entity.UserDevice, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveDevicesByUser")
	}

	var r0 []*entity.UserDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.UserDevice, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.UserDevice); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_FindActiveDevicesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActiveDevicesByUser'
type MockDeviceRepository_FindActiveDevicesByUser_Call struct {
	*mock.Call
}

// FindActiveDevicesByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDeviceRepository_Expecter) FindActiveDevicesByUser(ctx interface{}, userID interface{}) *MockDeviceRepository_FindActiveDevicesByUser_Call {
	return &MockDeviceRepository_FindActiveDevicesByUser_Call{Call: _e.mock.On("FindActiveDevicesByUser", ctx, userID)}
}

func (_c *MockDeviceRepository_FindActiveDevicesByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDeviceRepository_FindActiveDevicesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDeviceRepository_FindActiveDevicesByUser_Call) Return(_a0 []*entity.UserDevice, _a1 error) *MockDeviceRepository_FindActiveDevicesByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_FindActiveDevicesByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*entity.UserDevice, error)) *MockDeviceRepository_FindActiveDevicesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindDeviceByID provides a mock function with given fields: ctx, id
func (_m *MockDeviceRepository) FindDeviceByID(ctx context.Context, id uuid.UUID) (*entity.UserDevice, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindDeviceByID")
	}

	var r0 *entity.UserDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.UserDevice, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.UserDevice); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_FindDeviceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDeviceByID'
type MockDeviceRepository_FindDeviceByID_Call struct {
	*mock.Call
}

// FindDeviceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockDeviceRepository_Expecter) FindDeviceByID(ctx interface{}, id interface{}) *MockDeviceRepository_FindDeviceByID_Call {
	return &MockDeviceRepository_FindDeviceByID_Call{Call: _e.mock.On("FindDeviceByID", ctx, id)}
}

func (_c *MockDeviceRepository_FindDeviceByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockDeviceRepository_FindDeviceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDeviceRepository_FindDeviceByID_Call) Return(_a0 *entity.UserDevice, _a1 error) *MockDeviceRepository_FindDeviceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_FindDeviceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.UserDevice, error)) *MockDeviceRepository_FindDeviceByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindDevicesByUser provides a mock function with given fields: ctx, userID
func (_m *MockDeviceRepository) FindDevicesByUser(ctx context.Context, userID uuid.UUID) ([]*entity.UserDevice, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindDevicesByUser")
	}

	var r0 []*entity.UserDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.UserDevice, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.UserDevice); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_FindDevicesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDevicesByUser'
type MockDeviceRepository_FindDevicesByUser_Call struct {
	*mock.Call
}

// FindDevicesByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDeviceRepository_Expecter) FindDevicesByUser(ctx interface{}, userID interface{}) *MockDeviceRepository_FindDevicesByUser_Call {
	return &MockDeviceRepository_FindDevicesByUser_Call{Call: _e.mock.On("FindDevicesByUser", ctx, userID)}
}

func (_c *MockDeviceRepository_FindDevicesByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDeviceRepository_FindDevicesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDeviceRepository_FindDevicesByUser_Call) Return(_a0 []*entity.UserDevice, _a1 error) *MockDeviceRepository_FindDevicesByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_FindDevicesByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*entity.UserDevice, error)) *MockDeviceRepository_FindDevicesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFCMToken provides a mock function with given fields: ctx, deviceID, fcmToken
func (_m *MockDeviceRepository) UpdateFCMToken(ctx context.Context, deviceID uuid.UUID, fcmToken string) error {
	ret := _m.Called(ctx, deviceID, fcmToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFCMToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, deviceID, fcmToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeviceRepository_UpdateFCMToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFCMToken'
type MockDeviceRepository_UpdateFCMToken_Call struct {
	*mock.Call
}

// UpdateFCMToken is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceID uuid.UUID
//   - fcmToken string
func (_e *MockDeviceRepository_Expecter) UpdateFCMToken(ctx interface{}, deviceID interface{}, fcmToken interface{}) *MockDeviceRepository_UpdateFCMToken_Call {
	return &MockDeviceRepository_UpdateFCMToken_Call{Call: _e.mock.On("UpdateFCMToken", ctx, deviceID, fcmToken)}
}

func (_c *MockDeviceRepository_UpdateFCMToken_Call) Run(run func(ctx context.Context, deviceID uuid.UUID, fcmToken string)) *MockDeviceRepository_UpdateFCMToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockDeviceRepository_UpdateFCMToken_Call) Return(_a0 error) *MockDeviceRepository_UpdateFCMToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeviceRepository_UpdateFCMToken_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *MockDeviceRepository_UpdateFCMToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceRepository creates a new instance of MockDeviceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceRepository {
	mock := &MockDeviceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.5. DO NOT EDIT.

package repository

import (
	context "context"
	entity "radar/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAddressRepository is an autogenerated mock type for the AddressRepository type
type MockAddressRepository struct {
	mock.Mock
}

type MockAddressRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressRepository) EXPECT() *MockAddressRepository_Expecter {
	return &MockAddressRepository_Expecter{mock: &_m.Mock}
}

// CountAddressesByOwner provides a mock function with given fields: ctx, ownerID, ownerType
func (_m *MockAddressRepository) CountAddressesByOwner(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType) (int64, error) {
	ret := _m.Called(ctx, ownerID, ownerType)

	if len(ret) == 0 {
		panic("no return value specified for CountAddressesByOwner")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) (int64, error)); ok {
		return rf(ctx, ownerID, ownerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) int64); ok {
		r0 = rf(ctx, ownerID, ownerType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.OwnerType) error); ok {
		r1 = rf(ctx, ownerID, ownerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_CountAddressesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAddressesByOwner'
type MockAddressRepository_CountAddressesByOwner_Call struct {
	*mock.Call
}

// CountAddressesByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID uuid.UUID
//   - ownerType entity.OwnerType
func (_e *MockAddressRepository_Expecter) CountAddressesByOwner(ctx interface{}, ownerID interface{}, ownerType interface{}) *MockAddressRepository_CountAddressesByOwner_Call {
	return &MockAddressRepository_CountAddressesByOwner_Call{Call: _e.mock.On("CountAddressesByOwner", ctx, ownerID, ownerType)}
}

func (_c *MockAddressRepository_CountAddressesByOwner_Call) Run(run func(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType)) *MockAddressRepository_CountAddressesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.OwnerType))
	})
	return _c
}

func (_c *MockAddressRepository_CountAddressesByOwner_Call) Return(_a0 int64, _a1 error) *MockAddressRepository_CountAddressesByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_CountAddressesByOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.OwnerType) (int64, error)) *MockAddressRepository_CountAddressesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAddress provides a mock function with given fields: ctx, address
func (_m *MockAddressRepository) CreateAddress(ctx context.Context, address *entity.Address) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for CreateAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Address) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressRepository_CreateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAddress'
type MockAddressRepository_CreateAddress_Call struct {
	*mock.Call
}

// CreateAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - address *entity.Address
func (_e *MockAddressRepository_Expecter) CreateAddress(ctx interface{}, address interface{}) *MockAddressRepository_CreateAddress_Call {
	return &MockAddressRepository_CreateAddress_Call{Call: _e.mock.On("CreateAddress", ctx, address)}
}

func (_c *MockAddressRepository_CreateAddress_Call) Run(run func(ctx context.Context, address *entity.Address)) *MockAddressRepository_CreateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Address))
	})
	return _c
}

func (_c *MockAddressRepository_CreateAddress_Call) Return(_a0 error) *MockAddressRepository_CreateAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressRepository_CreateAddress_Call) RunAndReturn(run func(context.Context, *entity.Address) error) *MockAddressRepository_CreateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAddress provides a mock function with given fields: ctx, id
func (_m *MockAddressRepository) DeleteAddress(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressRepository_DeleteAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAddress'
type MockAddressRepository_DeleteAddress_Call struct {
	*mock.Call
}

// DeleteAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAddressRepository_Expecter) DeleteAddress(ctx interface{}, id interface{}) *MockAddressRepository_DeleteAddress_Call {
	return &MockAddressRepository_DeleteAddress_Call{Call: _e.mock.On("DeleteAddress", ctx, id)}
}

func (_c *MockAddressRepository_DeleteAddress_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAddressRepository_DeleteAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAddressRepository_DeleteAddress_Call) Return(_a0 error) *MockAddressRepository_DeleteAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressRepository_DeleteAddress_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockAddressRepository_DeleteAddress_Call {
	_c.Call.Return(run)
	return _c
}

// FindActiveAddressesByOwner provides a mock function with given fields: ctx, ownerID, ownerType
func (_m *MockAddressRepository) FindActiveAddressesByOwner(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType) ([]*entity.Address, error) {
	ret := _m.Called(ctx, ownerID, ownerType)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveAddressesByOwner")
	}

	var r0 []*entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) ([]*entity.Address, error)); ok {
		return rf(ctx, ownerID, ownerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) []*entity.Address); ok {
		r0 = rf(ctx, ownerID, ownerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.OwnerType) error); ok {
		r1 = rf(ctx, ownerID, ownerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_FindActiveAddressesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActiveAddressesByOwner'
type MockAddressRepository_FindActiveAddressesByOwner_Call struct {
	*mock.Call
}

// FindActiveAddressesByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID uuid.UUID
//   - ownerType entity.OwnerType
func (_e *MockAddressRepository_Expecter) FindActiveAddressesByOwner(ctx interface{}, ownerID interface{}, ownerType interface{}) *MockAddressRepository_FindActiveAddressesByOwner_Call {
	return &MockAddressRepository_FindActiveAddressesByOwner_Call{Call: _e.mock.On("FindActiveAddressesByOwner", ctx, ownerID, ownerType)}
}

func (_c *MockAddressRepository_FindActiveAddressesByOwner_Call) Run(run func(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType)) *MockAddressRepository_FindActiveAddressesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.OwnerType))
	})
	return _c
}

func (_c *MockAddressRepository_FindActiveAddressesByOwner_Call) Return(_a0 []*entity.Address, _a1 error) *MockAddressRepository_FindActiveAddressesByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_FindActiveAddressesByOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.OwnerType) ([]*entity.Address, error)) *MockAddressRepository_FindActiveAddressesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// FindAddressByID provides a mock function with given fields: ctx, id
func (_m *MockAddressRepository) FindAddressByID(ctx context.Context, id uuid.UUID) (*entity.Address, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindAddressByID")
	}

	var r0 *entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Address, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Address); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_FindAddressByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAddressByID'
type MockAddressRepository_FindAddressByID_Call struct {
	*mock.Call
}

// FindAddressByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAddressRepository_Expecter) FindAddressByID(ctx interface{}, id interface{}) *MockAddressRepository_FindAddressByID_Call {
	return &MockAddressRepository_FindAddressByID_Call{Call: _e.mock.On("FindAddressByID", ctx, id)}
}

func (_c *MockAddressRepository_FindAddressByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAddressRepository_FindAddressByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAddressRepository_FindAddressByID_Call) Return(_a0 *entity.Address, _a1 error) *MockAddressRepository_FindAddressByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_FindAddressByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.Address, error)) *MockAddressRepository_FindAddressByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindAddressesByOwner provides a mock function with given fields: ctx, ownerID, ownerType
func (_m *MockAddressRepository) FindAddressesByOwner(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType) ([]*entity.Address, error) {
	ret := _m.Called(ctx, ownerID, ownerType)

	if len(ret) == 0 {
		panic("no return value specified for FindAddressesByOwner")
	}

	var r0 []*entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) ([]*entity.Address, error)); ok {
		return rf(ctx, ownerID, ownerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) []*entity.Address); ok {
		r0 = rf(ctx, ownerID, ownerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.OwnerType) error); ok {
		r1 = rf(ctx, ownerID, ownerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_FindAddressesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAddressesByOwner'
type MockAddressRepository_FindAddressesByOwner_Call struct {
	*mock.Call
}

// FindAddressesByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID uuid.UUID
//   - ownerType entity.OwnerType
func (_e *MockAddressRepository_Expecter) FindAddressesByOwner(ctx interface{}, ownerID interface{}, ownerType interface{}) *MockAddressRepository_FindAddressesByOwner_Call {
	return &MockAddressRepository_FindAddressesByOwner_Call{Call: _e.mock.On("FindAddressesByOwner", ctx, ownerID, ownerType)}
}

func (_c *MockAddressRepository_FindAddressesByOwner_Call) Run(run func(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType)) *MockAddressRepository_FindAddressesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.OwnerType))
	})
	return _c
}

func (_c *MockAddressRepository_FindAddressesByOwner_Call) Return(_a0 []*entity.Address, _a1 error) *MockAddressRepository_FindAddressesByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_FindAddressesByOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.OwnerType) ([]*entity.Address, error)) *MockAddressRepository_FindAddressesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// FindPrimaryAddressByOwner provides a mock function with given fields: ctx, ownerID, ownerType
func (_m *MockAddressRepository) FindPrimaryAddressByOwner(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType) (*entity.Address, error) {
	ret := _m.Called(ctx, ownerID, ownerType)

	if len(ret) == 0 {
		panic("no return value specified for FindPrimaryAddressByOwner")
	}

	var r0 *entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) (*entity.Address, error)); ok {
		return rf(ctx, ownerID, ownerType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.OwnerType) *entity.Address); ok {
		r0 = rf(ctx, ownerID, ownerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entity.OwnerType) error); ok {
		r1 = rf(ctx, ownerID, ownerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_FindPrimaryAddressByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPrimaryAddressByOwner'
type MockAddressRepository_FindPrimaryAddressByOwner_Call struct {
	*mock.Call
}

// FindPrimaryAddressByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID uuid.UUID
//   - ownerType entity.OwnerType
func (_e *MockAddressRepository_Expecter) FindPrimaryAddressByOwner(ctx interface{}, ownerID interface{}, ownerType interface{}) *MockAddressRepository_FindPrimaryAddressByOwner_Call {
	return &MockAddressRepository_FindPrimaryAddressByOwner_Call{Call: _e.mock.On("FindPrimaryAddressByOwner", ctx, ownerID, ownerType)}
}

func (_c *MockAddressRepository_FindPrimaryAddressByOwner_Call) Run(run func(ctx context.Context, ownerID uuid.UUID, ownerType entity.OwnerType)) *MockAddressRepository_FindPrimaryAddressByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.OwnerType))
	})
	return _c
}

func (_c *MockAddressRepository_FindPrimaryAddressByOwner_Call) Return(_a0 *entity.Address, _a1 error) *MockAddressRepository_FindPrimaryAddressByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_FindPrimaryAddressByOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.OwnerType) (*entity.Address, error)) *MockAddressRepository_FindPrimaryAddressByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAddress provides a mock function with given fields: ctx, address
func (_m *MockAddressRepository) UpdateAddress(ctx context.Context, address *entity.Address) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Address) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressRepository_UpdateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAddress'
type MockAddressRepository_UpdateAddress_Call struct {
	*mock.Call
}

// UpdateAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - address *entity.Address
func (_e *MockAddressRepository_Expecter) UpdateAddress(ctx interface{}, address interface{}) *MockAddressRepository_UpdateAddress_Call {
	return &MockAddressRepository_UpdateAddress_Call{Call: _e.mock.On("UpdateAddress", ctx, address)}
}

func (_c *MockAddressRepository_UpdateAddress_Call) Run(run func(ctx context.Context, address *entity.Address)) *MockAddressRepository_UpdateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Address))
	})
	return _c
}

func (_c *MockAddressRepository_UpdateAddress_Call) Return(_a0 error) *MockAddressRepository_UpdateAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressRepository_UpdateAddress_Call) RunAndReturn(run func(context.Context, *entity.Address) error) *MockAddressRepository_UpdateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddressRepository creates a new instance of MockAddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressRepository {
	mock := &MockAddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

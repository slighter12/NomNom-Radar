// Code generated by mockery v2.53.5. DO NOT EDIT.

package repository

import (
	context "context"
	entity "radar/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type MockSubscriptionRepository struct {
	mock.Mock
}

type MockSubscriptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepository_Expecter {
	return &MockSubscriptionRepository_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: ctx, subscription
func (_m *MockSubscriptionRepository) CreateSubscription(ctx context.Context, subscription *entity.UserMerchantSubscription) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserMerchantSubscription) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionRepository_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockSubscriptionRepository_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - subscription *entity.UserMerchantSubscription
func (_e *MockSubscriptionRepository_Expecter) CreateSubscription(ctx interface{}, subscription interface{}) *MockSubscriptionRepository_CreateSubscription_Call {
	return &MockSubscriptionRepository_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", ctx, subscription)}
}

func (_c *MockSubscriptionRepository_CreateSubscription_Call) Run(run func(ctx context.Context, subscription *entity.UserMerchantSubscription)) *MockSubscriptionRepository_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.UserMerchantSubscription))
	})
	return _c
}

func (_c *MockSubscriptionRepository_CreateSubscription_Call) Return(_a0 error) *MockSubscriptionRepository_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionRepository_CreateSubscription_Call) RunAndReturn(run func(context.Context, *entity.UserMerchantSubscription) error) *MockSubscriptionRepository_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function with given fields: ctx, id
func (_m *MockSubscriptionRepository) DeleteSubscription(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionRepository_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type MockSubscriptionRepository_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) DeleteSubscription(ctx interface{}, id interface{}) *MockSubscriptionRepository_DeleteSubscription_Call {
	return &MockSubscriptionRepository_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", ctx, id)}
}

func (_c *MockSubscriptionRepository_DeleteSubscription_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSubscriptionRepository_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscriptionRepository_DeleteSubscription_Call) Return(_a0 error) *MockSubscriptionRepository_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionRepository_DeleteSubscription_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockSubscriptionRepository_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// FindDevicesForUsers provides a mock function with given fields: ctx, userIDs
func (_m *MockSubscriptionRepository) FindDevicesForUsers(ctx context.Context, userIDs []uuid.UUID) ([]*entity.UserDevice, error) {
	ret := _m.Called(ctx, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindDevicesForUsers")
	}

	var r0 []*entity.UserDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*entity.UserDevice, error)); ok {
		return rf(ctx, userIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*entity.UserDevice); ok {
		r0 = rf(ctx, userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionRepository_FindDevicesForUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDevicesForUsers'
type MockSubscriptionRepository_FindDevicesForUsers_Call struct {
	*mock.Call
}

// FindDevicesForUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - userIDs []uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) FindDevicesForUsers(ctx interface{}, userIDs interface{}) *MockSubscriptionRepository_FindDevicesForUsers_Call {
	return &MockSubscriptionRepository_FindDevicesForUsers_Call{Call: _e.mock.On("FindDevicesForUsers", ctx, userIDs)}
}

func (_c *MockSubscriptionRepository_FindDevicesForUsers_Call) Run(run func(ctx context.Context, userIDs []uuid.UUID)) *MockSubscriptionRepository_FindDevicesForUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockSubscriptionRepository_FindDevicesForUsers_Call) Return(_a0 []*entity.UserDevice, _a1 error) *MockSubscriptionRepository_FindDevicesForUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionRepository_FindDevicesForUsers_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*entity.UserDevice, error)) *MockSubscriptionRepository_FindDevicesForUsers_Call {
	_c.Call.Return(run)
	return _c
}

// FindSubscribersWithinRadius provides a mock function with given fields: ctx, merchantID, merchantLat, merchantLon
func (_m *MockSubscriptionRepository) FindSubscribersWithinRadius(ctx context.Context, merchantID uuid.UUID, merchantLat float64, merchantLon float64) ([]*entity.UserMerchantSubscription, error) {
	ret := _m.Called(ctx, merchantID, merchantLat, merchantLon)

	if len(ret) == 0 {
		panic("no return value specified for FindSubscribersWithinRadius")
	}

	var r0 []*entity.UserMerchantSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64, float64) ([]*entity.UserMerchantSubscription, error)); ok {
		return rf(ctx, merchantID, merchantLat, merchantLon)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64, float64) []*entity.UserMerchantSubscription); ok {
		r0 = rf(ctx, merchantID, merchantLat, merchantLon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserMerchantSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, float64, float64) error); ok {
		r1 = rf(ctx, merchantID, merchantLat, merchantLon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionRepository_FindSubscribersWithinRadius_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubscribersWithinRadius'
type MockSubscriptionRepository_FindSubscribersWithinRadius_Call struct {
	*mock.Call
}

// FindSubscribersWithinRadius is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantID uuid.UUID
//   - merchantLat float64
//   - merchantLon float64
func (_e *MockSubscriptionRepository_Expecter) FindSubscribersWithinRadius(ctx interface{}, merchantID interface{}, merchantLat interface{}, merchantLon interface{}) *MockSubscriptionRepository_FindSubscribersWithinRadius_Call {
	return &MockSubscriptionRepository_FindSubscribersWithinRadius_Call{Call: _e.mock.On("FindSubscribersWithinRadius", ctx, merchantID, merchantLat, merchantLon)}
}

func (_c *MockSubscriptionRepository_FindSubscribersWithinRadius_Call) Run(run func(ctx context.Context, merchantID uuid.UUID, merchantLat float64, merchantLon float64)) *MockSubscriptionRepository_FindSubscribersWithinRadius_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscribersWithinRadius_Call) Return(_a0 []*entity.UserMerchantSubscription, _a1 error) *MockSubscriptionRepository_FindSubscribersWithinRadius_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscribersWithinRadius_Call) RunAndReturn(run func(context.Context, uuid.UUID, float64, float64) ([]*entity.UserMerchantSubscription, error)) *MockSubscriptionRepository_FindSubscribersWithinRadius_Call {
	_c.Call.Return(run)
	return _c
}

// FindSubscriptionByID provides a mock function with given fields: ctx, id
func (_m *MockSubscriptionRepository) FindSubscriptionByID(ctx context.Context, id uuid.UUID) (*entity.UserMerchantSubscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindSubscriptionByID")
	}

	var r0 *entity.UserMerchantSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.UserMerchantSubscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.UserMerchantSubscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserMerchantSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionRepository_FindSubscriptionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubscriptionByID'
type MockSubscriptionRepository_FindSubscriptionByID_Call struct {
	*mock.Call
}

// FindSubscriptionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) FindSubscriptionByID(ctx interface{}, id interface{}) *MockSubscriptionRepository_FindSubscriptionByID_Call {
	return &MockSubscriptionRepository_FindSubscriptionByID_Call{Call: _e.mock.On("FindSubscriptionByID", ctx, id)}
}

func (_c *MockSubscriptionRepository_FindSubscriptionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSubscriptionRepository_FindSubscriptionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionByID_Call) Return(_a0 *entity.UserMerchantSubscription, _a1 error) *MockSubscriptionRepository_FindSubscriptionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.UserMerchantSubscription, error)) *MockSubscriptionRepository_FindSubscriptionByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindSubscriptionByUserAndMerchant provides a mock function with given fields: ctx, userID, merchantID
func (_m *MockSubscriptionRepository) FindSubscriptionByUserAndMerchant(ctx context.Context, userID uuid.UUID, merchantID uuid.UUID) (*entity.UserMerchantSubscription, error) {
	ret := _m.Called(ctx, userID, merchantID)

	if len(ret) == 0 {
		panic("no return value specified for FindSubscriptionByUserAndMerchant")
	}

	var r0 *entity.UserMerchantSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*entity.UserMerchantSubscription, error)); ok {
		return rf(ctx, userID, merchantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *entity.UserMerchantSubscription); ok {
		r0 = rf(ctx, userID, merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserMerchantSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubscriptionByUserAndMerchant'
type MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call struct {
	*mock.Call
}

// FindSubscriptionByUserAndMerchant is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - merchantID uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) FindSubscriptionByUserAndMerchant(ctx interface{}, userID interface{}, merchantID interface{}) *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call {
	return &MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call{Call: _e.mock.On("FindSubscriptionByUserAndMerchant", ctx, userID, merchantID)}
}

func (_c *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call) Run(run func(ctx context.Context, userID uuid.UUID, merchantID uuid.UUID)) *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call) Return(_a0 *entity.UserMerchantSubscription, _a1 error) *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*entity.UserMerchantSubscription, error)) *MockSubscriptionRepository_FindSubscriptionByUserAndMerchant_Call {
	_c.Call.Return(run)
	return _c
}

// FindSubscriptionsByMerchant provides a mock function with given fields: ctx, merchantID
func (_m *MockSubscriptionRepository) FindSubscriptionsByMerchant(ctx context.Context, merchantID uuid.UUID) ([]*entity.UserMerchantSubscription, error) {
	ret := _m.Called(ctx, merchantID)

	if len(ret) == 0 {
		panic("no return value specified for FindSubscriptionsByMerchant")
	}

	var r0 []*entity.UserMerchantSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.UserMerchantSubscription, error)); ok {
		return rf(ctx, merchantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.UserMerchantSubscription); ok {
		r0 = rf(ctx, merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserMerchantSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionRepository_FindSubscriptionsByMerchant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubscriptionsByMerchant'
type MockSubscriptionRepository_FindSubscriptionsByMerchant_Call struct {
	*mock.Call
}

// FindSubscriptionsByMerchant is a helper method to define mock.On call
//   - ctx context.Context
//   - merchantID uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) FindSubscriptionsByMerchant(ctx interface{}, merchantID interface{}) *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call {
	return &MockSubscriptionRepository_FindSubscriptionsByMerchant_Call{Call: _e.mock.On("FindSubscriptionsByMerchant", ctx, merchantID)}
}

func (_c *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call) Run(run func(ctx context.Context, merchantID uuid.UUID)) *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call) Return(_a0 []*entity.UserMerchantSubscription, _a1 error) *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*entity.UserMerchantSubscription, error)) *MockSubscriptionRepository_FindSubscriptionsByMerchant_Call {
	_c.Call.Return(run)
	return _c
}

// FindSubscriptionsByUser provides a mock function with given fields: ctx, userID
func (_m *MockSubscriptionRepository) FindSubscriptionsByUser(ctx context.Context, userID uuid.UUID) ([]*entity.UserMerchantSubscription, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindSubscriptionsByUser")
	}

	var r0 []*entity.UserMerchantSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.UserMerchantSubscription, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.UserMerchantSubscription); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserMerchantSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionRepository_FindSubscriptionsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubscriptionsByUser'
type MockSubscriptionRepository_FindSubscriptionsByUser_Call struct {
	*mock.Call
}

// FindSubscriptionsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockSubscriptionRepository_Expecter) FindSubscriptionsByUser(ctx interface{}, userID interface{}) *MockSubscriptionRepository_FindSubscriptionsByUser_Call {
	return &MockSubscriptionRepository_FindSubscriptionsByUser_Call{Call: _e.mock.On("FindSubscriptionsByUser", ctx, userID)}
}

func (_c *MockSubscriptionRepository_FindSubscriptionsByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockSubscriptionRepository_FindSubscriptionsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionsByUser_Call) Return(_a0 []*entity.UserMerchantSubscription, _a1 error) *MockSubscriptionRepository_FindSubscriptionsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionRepository_FindSubscriptionsByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*entity.UserMerchantSubscription, error)) *MockSubscriptionRepository_FindSubscriptionsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationRadius provides a mock function with given fields: ctx, id, radius
func (_m *MockSubscriptionRepository) UpdateNotificationRadius(ctx context.Context, id uuid.UUID, radius float64) error {
	ret := _m.Called(ctx, id, radius)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRadius")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) error); ok {
		r0 = rf(ctx, id, radius)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionRepository_UpdateNotificationRadius_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationRadius'
type MockSubscriptionRepository_UpdateNotificationRadius_Call struct {
	*mock.Call
}

// UpdateNotificationRadius is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - radius float64
func (_e *MockSubscriptionRepository_Expecter) UpdateNotificationRadius(ctx interface{}, id interface{}, radius interface{}) *MockSubscriptionRepository_UpdateNotificationRadius_Call {
	return &MockSubscriptionRepository_UpdateNotificationRadius_Call{Call: _e.mock.On("UpdateNotificationRadius", ctx, id, radius)}
}

func (_c *MockSubscriptionRepository_UpdateNotificationRadius_Call) Run(run func(ctx context.Context, id uuid.UUID, radius float64)) *MockSubscriptionRepository_UpdateNotificationRadius_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *MockSubscriptionRepository_UpdateNotificationRadius_Call) Return(_a0 error) *MockSubscriptionRepository_UpdateNotificationRadius_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionRepository_UpdateNotificationRadius_Call) RunAndReturn(run func(context.Context, uuid.UUID, float64) error) *MockSubscriptionRepository_UpdateNotificationRadius_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscriptionStatus provides a mock function with given fields: ctx, id, isActive
func (_m *MockSubscriptionRepository) UpdateSubscriptionStatus(ctx context.Context, id uuid.UUID, isActive bool) error {
	ret := _m.Called(ctx, id, isActive)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, id, isActive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionRepository_UpdateSubscriptionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscriptionStatus'
type MockSubscriptionRepository_UpdateSubscriptionStatus_Call struct {
	*mock.Call
}

// UpdateSubscriptionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - isActive bool
func (_e *MockSubscriptionRepository_Expecter) UpdateSubscriptionStatus(ctx interface{}, id interface{}, isActive interface{}) *MockSubscriptionRepository_UpdateSubscriptionStatus_Call {
	return &MockSubscriptionRepository_UpdateSubscriptionStatus_Call{Call: _e.mock.On("UpdateSubscriptionStatus", ctx, id, isActive)}
}

func (_c *MockSubscriptionRepository_UpdateSubscriptionStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, isActive bool)) *MockSubscriptionRepository_UpdateSubscriptionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *MockSubscriptionRepository_UpdateSubscriptionStatus_Call) Return(_a0 error) *MockSubscriptionRepository_UpdateSubscriptionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionRepository_UpdateSubscriptionStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, bool) error) *MockSubscriptionRepository_UpdateSubscriptionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionRepository creates a new instance of MockSubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"radar/internal/infra/persistence/model"
)

func newUserProfileModel(db *gorm.DB, opts ...gen.DOOption) userProfileModel {
	_userProfileModel := userProfileModel{}

	_userProfileModel.userProfileModelDo.UseDB(db, opts...)
	_userProfileModel.userProfileModelDo.UseModel(&model.UserProfileModel{})

	tableName := _userProfileModel.userProfileModelDo.TableName()
	_userProfileModel.ALL = field.NewAsterisk(tableName)
	_userProfileModel.UserID = field.NewField(tableName, "user_id")
	_userProfileModel.LoyaltyPoints = field.NewInt(tableName, "loyalty_points")
	_userProfileModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userProfileModel.Addresses = userProfileModelHasManyAddresses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Addresses", "model.AddressModel"),
	}

	_userProfileModel.fillFieldMap()

	return _userProfileModel
}

type userProfileModel struct {
	userProfileModelDo userProfileModelDo

	ALL           field.Asterisk
	UserID        field.Field
	LoyaltyPoints field.Int
	UpdatedAt     field.Time
	Addresses     userProfileModelHasManyAddresses

	fieldMap map[string]field.Expr
}

func (u userProfileModel) Table(newTableName string) *userProfileModel {
	u.userProfileModelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userProfileModel) As(alias string) *userProfileModel {
	u.userProfileModelDo.DO = *(u.userProfileModelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userProfileModel) updateTableName(table string) *userProfileModel {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewField(table, "user_id")
	u.LoyaltyPoints = field.NewInt(table, "loyalty_points")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userProfileModel) WithContext(ctx context.Context) *userProfileModelDo {
	return u.userProfileModelDo.WithContext(ctx)
}

func (u userProfileModel) TableName() string { return u.userProfileModelDo.TableName() }

func (u userProfileModel) Alias() string { return u.userProfileModelDo.Alias() }

func (u userProfileModel) Columns(cols ...field.Expr) gen.Columns {
	return u.userProfileModelDo.Columns(cols...)
}

func (u *userProfileModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userProfileModel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["loyalty_points"] = u.LoyaltyPoints
	u.fieldMap["updated_at"] = u.UpdatedAt

}

func (u userProfileModel) clone(db *gorm.DB) userProfileModel {
	u.userProfileModelDo.ReplaceConnPool(db.Statement.ConnPool)
	u.Addresses.db = db.Session(&gorm.Session{Initialized: true})
	u.Addresses.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u userProfileModel) replaceDB(db *gorm.DB) userProfileModel {
	u.userProfileModelDo.ReplaceDB(db)
	u.Addresses.db = db.Session(&gorm.Session{})
	return u
}

type userProfileModelHasManyAddresses struct {
	db *gorm.DB

	field.RelationField
}

func (a userProfileModelHasManyAddresses) Where(conds ...field.Expr) *userProfileModelHasManyAddresses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userProfileModelHasManyAddresses) WithContext(ctx context.Context) *userProfileModelHasManyAddresses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userProfileModelHasManyAddresses) Session(session *gorm.Session) *userProfileModelHasManyAddresses {
	a.db = a.db.Session(session)
	return &a
}

func (a userProfileModelHasManyAddresses) Model(m *model.UserProfileModel) *userProfileModelHasManyAddressesTx {
	return &userProfileModelHasManyAddressesTx{a.db.Model(m).Association(a.Name())}
}

func (a userProfileModelHasManyAddresses) Unscoped() *userProfileModelHasManyAddresses {
	a.db = a.db.Unscoped()
	return &a
}

type userProfileModelHasManyAddressesTx struct{ tx *gorm.Association }

func (a userProfileModelHasManyAddressesTx) Find() (result []*model.AddressModel, err error) {
	return result, a.tx.Find(&result)
}

func (a userProfileModelHasManyAddressesTx) Append(values ...*model.AddressModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userProfileModelHasManyAddressesTx) Replace(values ...*model.AddressModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userProfileModelHasManyAddressesTx) Delete(values ...*model.AddressModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userProfileModelHasManyAddressesTx) Clear() error {
	return a.tx.Clear()
}

func (a userProfileModelHasManyAddressesTx) Count() int64 {
	return a.tx.Count()
}

func (a userProfileModelHasManyAddressesTx) Unscoped() *userProfileModelHasManyAddressesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userProfileModelDo struct{ gen.DO }

func (u userProfileModelDo) Debug() *userProfileModelDo {
	return u.withDO(u.DO.Debug())
}

func (u userProfileModelDo) WithContext(ctx context.Context) *userProfileModelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userProfileModelDo) ReadDB() *userProfileModelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userProfileModelDo) WriteDB() *userProfileModelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userProfileModelDo) Session(config *gorm.Session) *userProfileModelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userProfileModelDo) Clauses(conds ...clause.Expression) *userProfileModelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userProfileModelDo) Returning(value interface{}, columns ...string) *userProfileModelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userProfileModelDo) Not(conds ...gen.Condition) *userProfileModelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userProfileModelDo) Or(conds ...gen.Condition) *userProfileModelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userProfileModelDo) Select(conds ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userProfileModelDo) Where(conds ...gen.Condition) *userProfileModelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userProfileModelDo) Order(conds ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userProfileModelDo) Distinct(cols ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userProfileModelDo) Omit(cols ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userProfileModelDo) Join(table schema.Tabler, on ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userProfileModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userProfileModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userProfileModelDo) Group(cols ...field.Expr) *userProfileModelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userProfileModelDo) Having(conds ...gen.Condition) *userProfileModelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userProfileModelDo) Limit(limit int) *userProfileModelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userProfileModelDo) Offset(offset int) *userProfileModelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userProfileModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userProfileModelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userProfileModelDo) Unscoped() *userProfileModelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userProfileModelDo) Create(values ...*model.UserProfileModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userProfileModelDo) CreateInBatches(values []*model.UserProfileModel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userProfileModelDo) Save(values ...*model.UserProfileModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userProfileModelDo) First() (*model.UserProfileModel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfileModel), nil
	}
}

func (u userProfileModelDo) Take() (*model.UserProfileModel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfileModel), nil
	}
}

func (u userProfileModelDo) Last() (*model.UserProfileModel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfileModel), nil
	}
}

func (u userProfileModelDo) Find() ([]*model.UserProfileModel, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserProfileModel), err
}

func (u userProfileModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProfileModel, err error) {
	buf := make([]*model.UserProfileModel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userProfileModelDo) FindInBatches(result *[]*model.UserProfileModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userProfileModelDo) Attrs(attrs ...field.AssignExpr) *userProfileModelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userProfileModelDo) Assign(attrs ...field.AssignExpr) *userProfileModelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userProfileModelDo) Joins(fields ...field.RelationField) *userProfileModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userProfileModelDo) Preload(fields ...field.RelationField) *userProfileModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userProfileModelDo) FirstOrInit() (*model.UserProfileModel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfileModel), nil
	}
}

func (u userProfileModelDo) FirstOrCreate() (*model.UserProfileModel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfileModel), nil
	}
}

func (u userProfileModelDo) FindByPage(offset int, limit int) (result []*model.UserProfileModel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userProfileModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userProfileModelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userProfileModelDo) Delete(models ...*model.UserProfileModel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userProfileModelDo) withDO(do gen.Dao) *userProfileModelDo {
	u.DO = *do.(*gen.DO)
	return u
}

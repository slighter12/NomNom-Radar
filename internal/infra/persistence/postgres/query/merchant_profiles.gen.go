// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"radar/internal/infra/persistence/model"
)

func newMerchantProfileModel(db *gorm.DB, opts ...gen.DOOption) merchantProfileModel {
	_merchantProfileModel := merchantProfileModel{}

	_merchantProfileModel.merchantProfileModelDo.UseDB(db, opts...)
	_merchantProfileModel.merchantProfileModelDo.UseModel(&model.MerchantProfileModel{})

	tableName := _merchantProfileModel.merchantProfileModelDo.TableName()
	_merchantProfileModel.ALL = field.NewAsterisk(tableName)
	_merchantProfileModel.UserID = field.NewField(tableName, "user_id")
	_merchantProfileModel.StoreName = field.NewString(tableName, "store_name")
	_merchantProfileModel.StoreDescription = field.NewString(tableName, "store_description")
	_merchantProfileModel.BusinessLicense = field.NewString(tableName, "business_license")
	_merchantProfileModel.StoreAddress = field.NewString(tableName, "store_address")
	_merchantProfileModel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_merchantProfileModel.fillFieldMap()

	return _merchantProfileModel
}

type merchantProfileModel struct {
	merchantProfileModelDo merchantProfileModelDo

	ALL              field.Asterisk
	UserID           field.Field
	StoreName        field.String
	StoreDescription field.String
	BusinessLicense  field.String
	StoreAddress     field.String
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m merchantProfileModel) Table(newTableName string) *merchantProfileModel {
	m.merchantProfileModelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m merchantProfileModel) As(alias string) *merchantProfileModel {
	m.merchantProfileModelDo.DO = *(m.merchantProfileModelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *merchantProfileModel) updateTableName(table string) *merchantProfileModel {
	m.ALL = field.NewAsterisk(table)
	m.UserID = field.NewField(table, "user_id")
	m.StoreName = field.NewString(table, "store_name")
	m.StoreDescription = field.NewString(table, "store_description")
	m.BusinessLicense = field.NewString(table, "business_license")
	m.StoreAddress = field.NewString(table, "store_address")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *merchantProfileModel) WithContext(ctx context.Context) *merchantProfileModelDo {
	return m.merchantProfileModelDo.WithContext(ctx)
}

func (m merchantProfileModel) TableName() string { return m.merchantProfileModelDo.TableName() }

func (m merchantProfileModel) Alias() string { return m.merchantProfileModelDo.Alias() }

func (m merchantProfileModel) Columns(cols ...field.Expr) gen.Columns {
	return m.merchantProfileModelDo.Columns(cols...)
}

func (m *merchantProfileModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *merchantProfileModel) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["store_name"] = m.StoreName
	m.fieldMap["store_description"] = m.StoreDescription
	m.fieldMap["business_license"] = m.BusinessLicense
	m.fieldMap["store_address"] = m.StoreAddress
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m merchantProfileModel) clone(db *gorm.DB) merchantProfileModel {
	m.merchantProfileModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m merchantProfileModel) replaceDB(db *gorm.DB) merchantProfileModel {
	m.merchantProfileModelDo.ReplaceDB(db)
	return m
}

type merchantProfileModelDo struct{ gen.DO }

func (m merchantProfileModelDo) Debug() *merchantProfileModelDo {
	return m.withDO(m.DO.Debug())
}

func (m merchantProfileModelDo) WithContext(ctx context.Context) *merchantProfileModelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m merchantProfileModelDo) ReadDB() *merchantProfileModelDo {
	return m.Clauses(dbresolver.Read)
}

func (m merchantProfileModelDo) WriteDB() *merchantProfileModelDo {
	return m.Clauses(dbresolver.Write)
}

func (m merchantProfileModelDo) Session(config *gorm.Session) *merchantProfileModelDo {
	return m.withDO(m.DO.Session(config))
}

func (m merchantProfileModelDo) Clauses(conds ...clause.Expression) *merchantProfileModelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m merchantProfileModelDo) Returning(value interface{}, columns ...string) *merchantProfileModelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m merchantProfileModelDo) Not(conds ...gen.Condition) *merchantProfileModelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m merchantProfileModelDo) Or(conds ...gen.Condition) *merchantProfileModelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m merchantProfileModelDo) Select(conds ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m merchantProfileModelDo) Where(conds ...gen.Condition) *merchantProfileModelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m merchantProfileModelDo) Order(conds ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m merchantProfileModelDo) Distinct(cols ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m merchantProfileModelDo) Omit(cols ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m merchantProfileModelDo) Join(table schema.Tabler, on ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m merchantProfileModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m merchantProfileModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m merchantProfileModelDo) Group(cols ...field.Expr) *merchantProfileModelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m merchantProfileModelDo) Having(conds ...gen.Condition) *merchantProfileModelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m merchantProfileModelDo) Limit(limit int) *merchantProfileModelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m merchantProfileModelDo) Offset(offset int) *merchantProfileModelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m merchantProfileModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *merchantProfileModelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m merchantProfileModelDo) Unscoped() *merchantProfileModelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m merchantProfileModelDo) Create(values ...*model.MerchantProfileModel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m merchantProfileModelDo) CreateInBatches(values []*model.MerchantProfileModel, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m merchantProfileModelDo) Save(values ...*model.MerchantProfileModel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m merchantProfileModelDo) First() (*model.MerchantProfileModel, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantProfileModel), nil
	}
}

func (m merchantProfileModelDo) Take() (*model.MerchantProfileModel, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantProfileModel), nil
	}
}

func (m merchantProfileModelDo) Last() (*model.MerchantProfileModel, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantProfileModel), nil
	}
}

func (m merchantProfileModelDo) Find() ([]*model.MerchantProfileModel, error) {
	result, err := m.DO.Find()
	return result.([]*model.MerchantProfileModel), err
}

func (m merchantProfileModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MerchantProfileModel, err error) {
	buf := make([]*model.MerchantProfileModel, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m merchantProfileModelDo) FindInBatches(result *[]*model.MerchantProfileModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m merchantProfileModelDo) Attrs(attrs ...field.AssignExpr) *merchantProfileModelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m merchantProfileModelDo) Assign(attrs ...field.AssignExpr) *merchantProfileModelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m merchantProfileModelDo) Joins(fields ...field.RelationField) *merchantProfileModelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m merchantProfileModelDo) Preload(fields ...field.RelationField) *merchantProfileModelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m merchantProfileModelDo) FirstOrInit() (*model.MerchantProfileModel, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantProfileModel), nil
	}
}

func (m merchantProfileModelDo) FirstOrCreate() (*model.MerchantProfileModel, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantProfileModel), nil
	}
}

func (m merchantProfileModelDo) FindByPage(offset int, limit int) (result []*model.MerchantProfileModel, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m merchantProfileModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m merchantProfileModelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m merchantProfileModelDo) Delete(models ...*model.MerchantProfileModel) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *merchantProfileModelDo) withDO(do gen.Dao) *merchantProfileModelDo {
	m.DO = *do.(*gen.DO)
	return m
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		AddressModel:         newAddressModel(db, opts...),
		AuthenticationModel:  newAuthenticationModel(db, opts...),
		MerchantProfileModel: newMerchantProfileModel(db, opts...),
		RefreshTokenModel:    newRefreshTokenModel(db, opts...),
		UserModel:            newUserModel(db, opts...),
		UserProfileModel:     newUserProfileModel(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AddressModel         addressModel
	AuthenticationModel  authenticationModel
	MerchantProfileModel merchantProfileModel
	RefreshTokenModel    refreshTokenModel
	UserModel            userModel
	UserProfileModel     userProfileModel
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		AddressModel:         q.AddressModel.clone(db),
		AuthenticationModel:  q.AuthenticationModel.clone(db),
		MerchantProfileModel: q.MerchantProfileModel.clone(db),
		RefreshTokenModel:    q.RefreshTokenModel.clone(db),
		UserModel:            q.UserModel.clone(db),
		UserProfileModel:     q.UserProfileModel.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		AddressModel:         q.AddressModel.replaceDB(db),
		AuthenticationModel:  q.AuthenticationModel.replaceDB(db),
		MerchantProfileModel: q.MerchantProfileModel.replaceDB(db),
		RefreshTokenModel:    q.RefreshTokenModel.replaceDB(db),
		UserModel:            q.UserModel.replaceDB(db),
		UserProfileModel:     q.UserProfileModel.replaceDB(db),
	}
}

type queryCtx struct {
	AddressModel         *addressModelDo
	AuthenticationModel  *authenticationModelDo
	MerchantProfileModel *merchantProfileModelDo
	RefreshTokenModel    *refreshTokenModelDo
	UserModel            *userModelDo
	UserProfileModel     *userProfileModelDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AddressModel:         q.AddressModel.WithContext(ctx),
		AuthenticationModel:  q.AuthenticationModel.WithContext(ctx),
		MerchantProfileModel: q.MerchantProfileModel.WithContext(ctx),
		RefreshTokenModel:    q.RefreshTokenModel.WithContext(ctx),
		UserModel:            q.UserModel.WithContext(ctx),
		UserProfileModel:     q.UserProfileModel.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"radar/internal/infra/persistence/model"
)

func newUserModel(db *gorm.DB, opts ...gen.DOOption) userModel {
	_userModel := userModel{}

	_userModel.userModelDo.UseDB(db, opts...)
	_userModel.userModelDo.UseModel(&model.UserModel{})

	tableName := _userModel.userModelDo.TableName()
	_userModel.ALL = field.NewAsterisk(tableName)
	_userModel.ID = field.NewField(tableName, "id")
	_userModel.Email = field.NewString(tableName, "email")
	_userModel.Name = field.NewString(tableName, "name")
	_userModel.CreatedAt = field.NewTime(tableName, "created_at")
	_userModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userModel.DeletedAt = field.NewTime(tableName, "deleted_at")
	_userModel.UserProfile = userModelHasOneUserProfile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserProfile", "model.UserProfileModel"),
		Addresses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("UserProfile.Addresses", "model.AddressModel"),
		},
	}

	_userModel.MerchantProfile = userModelHasOneMerchantProfile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MerchantProfile", "model.MerchantProfileModel"),
		Addresses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("MerchantProfile.Addresses", "model.AddressModel"),
		},
	}

	_userModel.Authentications = userModelHasManyAuthentications{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Authentications", "model.AuthenticationModel"),
	}

	_userModel.RefreshTokens = userModelHasManyRefreshTokens{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RefreshTokens", "model.RefreshTokenModel"),
	}

	_userModel.fillFieldMap()

	return _userModel
}

type userModel struct {
	userModelDo userModelDo

	ALL         field.Asterisk
	ID          field.Field
	Email       field.String
	Name        field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Time
	UserProfile userModelHasOneUserProfile

	MerchantProfile userModelHasOneMerchantProfile

	Authentications userModelHasManyAuthentications

	RefreshTokens userModelHasManyRefreshTokens

	fieldMap map[string]field.Expr
}

func (u userModel) Table(newTableName string) *userModel {
	u.userModelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userModel) As(alias string) *userModel {
	u.userModelDo.DO = *(u.userModelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userModel) updateTableName(table string) *userModel {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewField(table, "id")
	u.Email = field.NewString(table, "email")
	u.Name = field.NewString(table, "name")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewTime(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userModel) WithContext(ctx context.Context) *userModelDo {
	return u.userModelDo.WithContext(ctx)
}

func (u userModel) TableName() string { return u.userModelDo.TableName() }

func (u userModel) Alias() string { return u.userModelDo.Alias() }

func (u userModel) Columns(cols ...field.Expr) gen.Columns { return u.userModelDo.Columns(cols...) }

func (u *userModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userModel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["email"] = u.Email
	u.fieldMap["name"] = u.Name
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt

}

func (u userModel) clone(db *gorm.DB) userModel {
	u.userModelDo.ReplaceConnPool(db.Statement.ConnPool)
	u.UserProfile.db = db.Session(&gorm.Session{Initialized: true})
	u.UserProfile.db.Statement.ConnPool = db.Statement.ConnPool
	u.MerchantProfile.db = db.Session(&gorm.Session{Initialized: true})
	u.MerchantProfile.db.Statement.ConnPool = db.Statement.ConnPool
	u.Authentications.db = db.Session(&gorm.Session{Initialized: true})
	u.Authentications.db.Statement.ConnPool = db.Statement.ConnPool
	u.RefreshTokens.db = db.Session(&gorm.Session{Initialized: true})
	u.RefreshTokens.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u userModel) replaceDB(db *gorm.DB) userModel {
	u.userModelDo.ReplaceDB(db)
	u.UserProfile.db = db.Session(&gorm.Session{})
	u.MerchantProfile.db = db.Session(&gorm.Session{})
	u.Authentications.db = db.Session(&gorm.Session{})
	u.RefreshTokens.db = db.Session(&gorm.Session{})
	return u
}

type userModelHasOneUserProfile struct {
	db *gorm.DB

	field.RelationField

	Addresses struct {
		field.RelationField
	}
}

func (a userModelHasOneUserProfile) Where(conds ...field.Expr) *userModelHasOneUserProfile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userModelHasOneUserProfile) WithContext(ctx context.Context) *userModelHasOneUserProfile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userModelHasOneUserProfile) Session(session *gorm.Session) *userModelHasOneUserProfile {
	a.db = a.db.Session(session)
	return &a
}

func (a userModelHasOneUserProfile) Model(m *model.UserModel) *userModelHasOneUserProfileTx {
	return &userModelHasOneUserProfileTx{a.db.Model(m).Association(a.Name())}
}

func (a userModelHasOneUserProfile) Unscoped() *userModelHasOneUserProfile {
	a.db = a.db.Unscoped()
	return &a
}

type userModelHasOneUserProfileTx struct{ tx *gorm.Association }

func (a userModelHasOneUserProfileTx) Find() (result *model.UserProfileModel, err error) {
	return result, a.tx.Find(&result)
}

func (a userModelHasOneUserProfileTx) Append(values ...*model.UserProfileModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userModelHasOneUserProfileTx) Replace(values ...*model.UserProfileModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userModelHasOneUserProfileTx) Delete(values ...*model.UserProfileModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userModelHasOneUserProfileTx) Clear() error {
	return a.tx.Clear()
}

func (a userModelHasOneUserProfileTx) Count() int64 {
	return a.tx.Count()
}

func (a userModelHasOneUserProfileTx) Unscoped() *userModelHasOneUserProfileTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userModelHasOneMerchantProfile struct {
	db *gorm.DB

	field.RelationField

	Addresses struct {
		field.RelationField
	}
}

func (a userModelHasOneMerchantProfile) Where(conds ...field.Expr) *userModelHasOneMerchantProfile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userModelHasOneMerchantProfile) WithContext(ctx context.Context) *userModelHasOneMerchantProfile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userModelHasOneMerchantProfile) Session(session *gorm.Session) *userModelHasOneMerchantProfile {
	a.db = a.db.Session(session)
	return &a
}

func (a userModelHasOneMerchantProfile) Model(m *model.UserModel) *userModelHasOneMerchantProfileTx {
	return &userModelHasOneMerchantProfileTx{a.db.Model(m).Association(a.Name())}
}

func (a userModelHasOneMerchantProfile) Unscoped() *userModelHasOneMerchantProfile {
	a.db = a.db.Unscoped()
	return &a
}

type userModelHasOneMerchantProfileTx struct{ tx *gorm.Association }

func (a userModelHasOneMerchantProfileTx) Find() (result *model.MerchantProfileModel, err error) {
	return result, a.tx.Find(&result)
}

func (a userModelHasOneMerchantProfileTx) Append(values ...*model.MerchantProfileModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userModelHasOneMerchantProfileTx) Replace(values ...*model.MerchantProfileModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userModelHasOneMerchantProfileTx) Delete(values ...*model.MerchantProfileModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userModelHasOneMerchantProfileTx) Clear() error {
	return a.tx.Clear()
}

func (a userModelHasOneMerchantProfileTx) Count() int64 {
	return a.tx.Count()
}

func (a userModelHasOneMerchantProfileTx) Unscoped() *userModelHasOneMerchantProfileTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userModelHasManyAuthentications struct {
	db *gorm.DB

	field.RelationField
}

func (a userModelHasManyAuthentications) Where(conds ...field.Expr) *userModelHasManyAuthentications {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userModelHasManyAuthentications) WithContext(ctx context.Context) *userModelHasManyAuthentications {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userModelHasManyAuthentications) Session(session *gorm.Session) *userModelHasManyAuthentications {
	a.db = a.db.Session(session)
	return &a
}

func (a userModelHasManyAuthentications) Model(m *model.UserModel) *userModelHasManyAuthenticationsTx {
	return &userModelHasManyAuthenticationsTx{a.db.Model(m).Association(a.Name())}
}

func (a userModelHasManyAuthentications) Unscoped() *userModelHasManyAuthentications {
	a.db = a.db.Unscoped()
	return &a
}

type userModelHasManyAuthenticationsTx struct{ tx *gorm.Association }

func (a userModelHasManyAuthenticationsTx) Find() (result []*model.AuthenticationModel, err error) {
	return result, a.tx.Find(&result)
}

func (a userModelHasManyAuthenticationsTx) Append(values ...*model.AuthenticationModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userModelHasManyAuthenticationsTx) Replace(values ...*model.AuthenticationModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userModelHasManyAuthenticationsTx) Delete(values ...*model.AuthenticationModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userModelHasManyAuthenticationsTx) Clear() error {
	return a.tx.Clear()
}

func (a userModelHasManyAuthenticationsTx) Count() int64 {
	return a.tx.Count()
}

func (a userModelHasManyAuthenticationsTx) Unscoped() *userModelHasManyAuthenticationsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userModelHasManyRefreshTokens struct {
	db *gorm.DB

	field.RelationField
}

func (a userModelHasManyRefreshTokens) Where(conds ...field.Expr) *userModelHasManyRefreshTokens {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userModelHasManyRefreshTokens) WithContext(ctx context.Context) *userModelHasManyRefreshTokens {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userModelHasManyRefreshTokens) Session(session *gorm.Session) *userModelHasManyRefreshTokens {
	a.db = a.db.Session(session)
	return &a
}

func (a userModelHasManyRefreshTokens) Model(m *model.UserModel) *userModelHasManyRefreshTokensTx {
	return &userModelHasManyRefreshTokensTx{a.db.Model(m).Association(a.Name())}
}

func (a userModelHasManyRefreshTokens) Unscoped() *userModelHasManyRefreshTokens {
	a.db = a.db.Unscoped()
	return &a
}

type userModelHasManyRefreshTokensTx struct{ tx *gorm.Association }

func (a userModelHasManyRefreshTokensTx) Find() (result []*model.RefreshTokenModel, err error) {
	return result, a.tx.Find(&result)
}

func (a userModelHasManyRefreshTokensTx) Append(values ...*model.RefreshTokenModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userModelHasManyRefreshTokensTx) Replace(values ...*model.RefreshTokenModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userModelHasManyRefreshTokensTx) Delete(values ...*model.RefreshTokenModel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userModelHasManyRefreshTokensTx) Clear() error {
	return a.tx.Clear()
}

func (a userModelHasManyRefreshTokensTx) Count() int64 {
	return a.tx.Count()
}

func (a userModelHasManyRefreshTokensTx) Unscoped() *userModelHasManyRefreshTokensTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userModelDo struct{ gen.DO }

func (u userModelDo) Debug() *userModelDo {
	return u.withDO(u.DO.Debug())
}

func (u userModelDo) WithContext(ctx context.Context) *userModelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userModelDo) ReadDB() *userModelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userModelDo) WriteDB() *userModelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userModelDo) Session(config *gorm.Session) *userModelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userModelDo) Clauses(conds ...clause.Expression) *userModelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userModelDo) Returning(value interface{}, columns ...string) *userModelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userModelDo) Not(conds ...gen.Condition) *userModelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userModelDo) Or(conds ...gen.Condition) *userModelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userModelDo) Select(conds ...field.Expr) *userModelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userModelDo) Where(conds ...gen.Condition) *userModelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userModelDo) Order(conds ...field.Expr) *userModelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userModelDo) Distinct(cols ...field.Expr) *userModelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userModelDo) Omit(cols ...field.Expr) *userModelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userModelDo) Join(table schema.Tabler, on ...field.Expr) *userModelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userModelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *userModelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userModelDo) Group(cols ...field.Expr) *userModelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userModelDo) Having(conds ...gen.Condition) *userModelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userModelDo) Limit(limit int) *userModelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userModelDo) Offset(offset int) *userModelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userModelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userModelDo) Unscoped() *userModelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userModelDo) Create(values ...*model.UserModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userModelDo) CreateInBatches(values []*model.UserModel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userModelDo) Save(values ...*model.UserModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userModelDo) First() (*model.UserModel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) Take() (*model.UserModel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) Last() (*model.UserModel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) Find() ([]*model.UserModel, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserModel), err
}

func (u userModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserModel, err error) {
	buf := make([]*model.UserModel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userModelDo) FindInBatches(result *[]*model.UserModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userModelDo) Attrs(attrs ...field.AssignExpr) *userModelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userModelDo) Assign(attrs ...field.AssignExpr) *userModelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userModelDo) Joins(fields ...field.RelationField) *userModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userModelDo) Preload(fields ...field.RelationField) *userModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userModelDo) FirstOrInit() (*model.UserModel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) FirstOrCreate() (*model.UserModel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserModel), nil
	}
}

func (u userModelDo) FindByPage(offset int, limit int) (result []*model.UserModel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userModelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userModelDo) Delete(models ...*model.UserModel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userModelDo) withDO(do gen.Dao) *userModelDo {
	u.DO = *do.(*gen.DO)
	return u
}

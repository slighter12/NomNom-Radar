// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"radar/internal/infra/persistence/model"
)

func newAddressModel(db *gorm.DB, opts ...gen.DOOption) addressModel {
	_addressModel := addressModel{}

	_addressModel.addressModelDo.UseDB(db, opts...)
	_addressModel.addressModelDo.UseModel(&model.AddressModel{})

	tableName := _addressModel.addressModelDo.TableName()
	_addressModel.ALL = field.NewAsterisk(tableName)
	_addressModel.ID = field.NewField(tableName, "id")
	_addressModel.UserProfileID = field.NewField(tableName, "user_profile_id")
	_addressModel.MerchantProfileID = field.NewField(tableName, "merchant_profile_id")
	_addressModel.Label = field.NewString(tableName, "label")
	_addressModel.FullAddress = field.NewString(tableName, "full_address")
	_addressModel.Latitude = field.NewFloat64(tableName, "latitude")
	_addressModel.Longitude = field.NewFloat64(tableName, "longitude")
	_addressModel.IsPrimary = field.NewBool(tableName, "is_primary")
	_addressModel.IsActive = field.NewBool(tableName, "is_active")
	_addressModel.CreatedAt = field.NewTime(tableName, "created_at")
	_addressModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_addressModel.DeletedAt = field.NewTime(tableName, "deleted_at")

	_addressModel.fillFieldMap()

	return _addressModel
}

type addressModel struct {
	addressModelDo addressModelDo

	ALL               field.Asterisk
	ID                field.Field
	UserProfileID     field.Field
	MerchantProfileID field.Field
	Label             field.String
	FullAddress       field.String
	Latitude          field.Float64
	Longitude         field.Float64
	IsPrimary         field.Bool
	IsActive          field.Bool
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Time

	fieldMap map[string]field.Expr
}

func (a addressModel) Table(newTableName string) *addressModel {
	a.addressModelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a addressModel) As(alias string) *addressModel {
	a.addressModelDo.DO = *(a.addressModelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *addressModel) updateTableName(table string) *addressModel {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewField(table, "id")
	a.UserProfileID = field.NewField(table, "user_profile_id")
	a.MerchantProfileID = field.NewField(table, "merchant_profile_id")
	a.Label = field.NewString(table, "label")
	a.FullAddress = field.NewString(table, "full_address")
	a.Latitude = field.NewFloat64(table, "latitude")
	a.Longitude = field.NewFloat64(table, "longitude")
	a.IsPrimary = field.NewBool(table, "is_primary")
	a.IsActive = field.NewBool(table, "is_active")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewTime(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *addressModel) WithContext(ctx context.Context) *addressModelDo {
	return a.addressModelDo.WithContext(ctx)
}

func (a addressModel) TableName() string { return a.addressModelDo.TableName() }

func (a addressModel) Alias() string { return a.addressModelDo.Alias() }

func (a addressModel) Columns(cols ...field.Expr) gen.Columns {
	return a.addressModelDo.Columns(cols...)
}

func (a *addressModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *addressModel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_profile_id"] = a.UserProfileID
	a.fieldMap["merchant_profile_id"] = a.MerchantProfileID
	a.fieldMap["label"] = a.Label
	a.fieldMap["full_address"] = a.FullAddress
	a.fieldMap["latitude"] = a.Latitude
	a.fieldMap["longitude"] = a.Longitude
	a.fieldMap["is_primary"] = a.IsPrimary
	a.fieldMap["is_active"] = a.IsActive
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a addressModel) clone(db *gorm.DB) addressModel {
	a.addressModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a addressModel) replaceDB(db *gorm.DB) addressModel {
	a.addressModelDo.ReplaceDB(db)
	return a
}

type addressModelDo struct{ gen.DO }

func (a addressModelDo) Debug() *addressModelDo {
	return a.withDO(a.DO.Debug())
}

func (a addressModelDo) WithContext(ctx context.Context) *addressModelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a addressModelDo) ReadDB() *addressModelDo {
	return a.Clauses(dbresolver.Read)
}

func (a addressModelDo) WriteDB() *addressModelDo {
	return a.Clauses(dbresolver.Write)
}

func (a addressModelDo) Session(config *gorm.Session) *addressModelDo {
	return a.withDO(a.DO.Session(config))
}

func (a addressModelDo) Clauses(conds ...clause.Expression) *addressModelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a addressModelDo) Returning(value interface{}, columns ...string) *addressModelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a addressModelDo) Not(conds ...gen.Condition) *addressModelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a addressModelDo) Or(conds ...gen.Condition) *addressModelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a addressModelDo) Select(conds ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a addressModelDo) Where(conds ...gen.Condition) *addressModelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a addressModelDo) Order(conds ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a addressModelDo) Distinct(cols ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a addressModelDo) Omit(cols ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a addressModelDo) Join(table schema.Tabler, on ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a addressModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a addressModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a addressModelDo) Group(cols ...field.Expr) *addressModelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a addressModelDo) Having(conds ...gen.Condition) *addressModelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a addressModelDo) Limit(limit int) *addressModelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a addressModelDo) Offset(offset int) *addressModelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a addressModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *addressModelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a addressModelDo) Unscoped() *addressModelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a addressModelDo) Create(values ...*model.AddressModel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a addressModelDo) CreateInBatches(values []*model.AddressModel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a addressModelDo) Save(values ...*model.AddressModel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a addressModelDo) First() (*model.AddressModel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressModel), nil
	}
}

func (a addressModelDo) Take() (*model.AddressModel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressModel), nil
	}
}

func (a addressModelDo) Last() (*model.AddressModel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressModel), nil
	}
}

func (a addressModelDo) Find() ([]*model.AddressModel, error) {
	result, err := a.DO.Find()
	return result.([]*model.AddressModel), err
}

func (a addressModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AddressModel, err error) {
	buf := make([]*model.AddressModel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a addressModelDo) FindInBatches(result *[]*model.AddressModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a addressModelDo) Attrs(attrs ...field.AssignExpr) *addressModelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a addressModelDo) Assign(attrs ...field.AssignExpr) *addressModelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a addressModelDo) Joins(fields ...field.RelationField) *addressModelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a addressModelDo) Preload(fields ...field.RelationField) *addressModelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a addressModelDo) FirstOrInit() (*model.AddressModel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressModel), nil
	}
}

func (a addressModelDo) FirstOrCreate() (*model.AddressModel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AddressModel), nil
	}
}

func (a addressModelDo) FindByPage(offset int, limit int) (result []*model.AddressModel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a addressModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a addressModelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a addressModelDo) Delete(models ...*model.AddressModel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *addressModelDo) withDO(do gen.Dao) *addressModelDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"radar/internal/infra/persistence/model"
)

func newAuthenticationModel(db *gorm.DB, opts ...gen.DOOption) authenticationModel {
	_authenticationModel := authenticationModel{}

	_authenticationModel.authenticationModelDo.UseDB(db, opts...)
	_authenticationModel.authenticationModelDo.UseModel(&model.AuthenticationModel{})

	tableName := _authenticationModel.authenticationModelDo.TableName()
	_authenticationModel.ALL = field.NewAsterisk(tableName)
	_authenticationModel.ID = field.NewField(tableName, "id")
	_authenticationModel.UserID = field.NewField(tableName, "user_id")
	_authenticationModel.Provider = field.NewString(tableName, "provider")
	_authenticationModel.ProviderUserID = field.NewString(tableName, "provider_user_id")
	_authenticationModel.PasswordHash = field.NewString(tableName, "password_hash")
	_authenticationModel.CreatedAt = field.NewTime(tableName, "created_at")

	_authenticationModel.fillFieldMap()

	return _authenticationModel
}

type authenticationModel struct {
	authenticationModelDo authenticationModelDo

	ALL            field.Asterisk
	ID             field.Field
	UserID         field.Field
	Provider       field.String
	ProviderUserID field.String
	PasswordHash   field.String
	CreatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (a authenticationModel) Table(newTableName string) *authenticationModel {
	a.authenticationModelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authenticationModel) As(alias string) *authenticationModel {
	a.authenticationModelDo.DO = *(a.authenticationModelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authenticationModel) updateTableName(table string) *authenticationModel {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewField(table, "id")
	a.UserID = field.NewField(table, "user_id")
	a.Provider = field.NewString(table, "provider")
	a.ProviderUserID = field.NewString(table, "provider_user_id")
	a.PasswordHash = field.NewString(table, "password_hash")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *authenticationModel) WithContext(ctx context.Context) *authenticationModelDo {
	return a.authenticationModelDo.WithContext(ctx)
}

func (a authenticationModel) TableName() string { return a.authenticationModelDo.TableName() }

func (a authenticationModel) Alias() string { return a.authenticationModelDo.Alias() }

func (a authenticationModel) Columns(cols ...field.Expr) gen.Columns {
	return a.authenticationModelDo.Columns(cols...)
}

func (a *authenticationModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authenticationModel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["provider"] = a.Provider
	a.fieldMap["provider_user_id"] = a.ProviderUserID
	a.fieldMap["password_hash"] = a.PasswordHash
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a authenticationModel) clone(db *gorm.DB) authenticationModel {
	a.authenticationModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authenticationModel) replaceDB(db *gorm.DB) authenticationModel {
	a.authenticationModelDo.ReplaceDB(db)
	return a
}

type authenticationModelDo struct{ gen.DO }

func (a authenticationModelDo) Debug() *authenticationModelDo {
	return a.withDO(a.DO.Debug())
}

func (a authenticationModelDo) WithContext(ctx context.Context) *authenticationModelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authenticationModelDo) ReadDB() *authenticationModelDo {
	return a.Clauses(dbresolver.Read)
}

func (a authenticationModelDo) WriteDB() *authenticationModelDo {
	return a.Clauses(dbresolver.Write)
}

func (a authenticationModelDo) Session(config *gorm.Session) *authenticationModelDo {
	return a.withDO(a.DO.Session(config))
}

func (a authenticationModelDo) Clauses(conds ...clause.Expression) *authenticationModelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authenticationModelDo) Returning(value interface{}, columns ...string) *authenticationModelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authenticationModelDo) Not(conds ...gen.Condition) *authenticationModelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authenticationModelDo) Or(conds ...gen.Condition) *authenticationModelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authenticationModelDo) Select(conds ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authenticationModelDo) Where(conds ...gen.Condition) *authenticationModelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authenticationModelDo) Order(conds ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authenticationModelDo) Distinct(cols ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authenticationModelDo) Omit(cols ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authenticationModelDo) Join(table schema.Tabler, on ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authenticationModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authenticationModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authenticationModelDo) Group(cols ...field.Expr) *authenticationModelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authenticationModelDo) Having(conds ...gen.Condition) *authenticationModelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authenticationModelDo) Limit(limit int) *authenticationModelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authenticationModelDo) Offset(offset int) *authenticationModelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authenticationModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authenticationModelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authenticationModelDo) Unscoped() *authenticationModelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authenticationModelDo) Create(values ...*model.AuthenticationModel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authenticationModelDo) CreateInBatches(values []*model.AuthenticationModel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authenticationModelDo) Save(values ...*model.AuthenticationModel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authenticationModelDo) First() (*model.AuthenticationModel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationModel), nil
	}
}

func (a authenticationModelDo) Take() (*model.AuthenticationModel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationModel), nil
	}
}

func (a authenticationModelDo) Last() (*model.AuthenticationModel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationModel), nil
	}
}

func (a authenticationModelDo) Find() ([]*model.AuthenticationModel, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthenticationModel), err
}

func (a authenticationModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthenticationModel, err error) {
	buf := make([]*model.AuthenticationModel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authenticationModelDo) FindInBatches(result *[]*model.AuthenticationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authenticationModelDo) Attrs(attrs ...field.AssignExpr) *authenticationModelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authenticationModelDo) Assign(attrs ...field.AssignExpr) *authenticationModelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authenticationModelDo) Joins(fields ...field.RelationField) *authenticationModelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authenticationModelDo) Preload(fields ...field.RelationField) *authenticationModelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authenticationModelDo) FirstOrInit() (*model.AuthenticationModel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationModel), nil
	}
}

func (a authenticationModelDo) FirstOrCreate() (*model.AuthenticationModel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthenticationModel), nil
	}
}

func (a authenticationModelDo) FindByPage(offset int, limit int) (result []*model.AuthenticationModel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authenticationModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authenticationModelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authenticationModelDo) Delete(models ...*model.AuthenticationModel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authenticationModelDo) withDO(do gen.Dao) *authenticationModelDo {
	a.DO = *do.(*gen.DO)
	return a
}

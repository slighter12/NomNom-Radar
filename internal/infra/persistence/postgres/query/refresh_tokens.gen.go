// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"radar/internal/infra/persistence/model"
)

func newRefreshTokenModel(db *gorm.DB, opts ...gen.DOOption) refreshTokenModel {
	_refreshTokenModel := refreshTokenModel{}

	_refreshTokenModel.refreshTokenModelDo.UseDB(db, opts...)
	_refreshTokenModel.refreshTokenModelDo.UseModel(&model.RefreshTokenModel{})

	tableName := _refreshTokenModel.refreshTokenModelDo.TableName()
	_refreshTokenModel.ALL = field.NewAsterisk(tableName)
	_refreshTokenModel.ID = field.NewField(tableName, "id")
	_refreshTokenModel.UserID = field.NewField(tableName, "user_id")
	_refreshTokenModel.TokenHash = field.NewString(tableName, "token_hash")
	_refreshTokenModel.ExpiresAt = field.NewTime(tableName, "expires_at")
	_refreshTokenModel.CreatedAt = field.NewTime(tableName, "created_at")

	_refreshTokenModel.fillFieldMap()

	return _refreshTokenModel
}

type refreshTokenModel struct {
	refreshTokenModelDo refreshTokenModelDo

	ALL       field.Asterisk
	ID        field.Field
	UserID    field.Field
	TokenHash field.String
	ExpiresAt field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (r refreshTokenModel) Table(newTableName string) *refreshTokenModel {
	r.refreshTokenModelDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refreshTokenModel) As(alias string) *refreshTokenModel {
	r.refreshTokenModelDo.DO = *(r.refreshTokenModelDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refreshTokenModel) updateTableName(table string) *refreshTokenModel {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewField(table, "id")
	r.UserID = field.NewField(table, "user_id")
	r.TokenHash = field.NewString(table, "token_hash")
	r.ExpiresAt = field.NewTime(table, "expires_at")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *refreshTokenModel) WithContext(ctx context.Context) *refreshTokenModelDo {
	return r.refreshTokenModelDo.WithContext(ctx)
}

func (r refreshTokenModel) TableName() string { return r.refreshTokenModelDo.TableName() }

func (r refreshTokenModel) Alias() string { return r.refreshTokenModelDo.Alias() }

func (r refreshTokenModel) Columns(cols ...field.Expr) gen.Columns {
	return r.refreshTokenModelDo.Columns(cols...)
}

func (r *refreshTokenModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refreshTokenModel) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["token_hash"] = r.TokenHash
	r.fieldMap["expires_at"] = r.ExpiresAt
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r refreshTokenModel) clone(db *gorm.DB) refreshTokenModel {
	r.refreshTokenModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refreshTokenModel) replaceDB(db *gorm.DB) refreshTokenModel {
	r.refreshTokenModelDo.ReplaceDB(db)
	return r
}

type refreshTokenModelDo struct{ gen.DO }

func (r refreshTokenModelDo) Debug() *refreshTokenModelDo {
	return r.withDO(r.DO.Debug())
}

func (r refreshTokenModelDo) WithContext(ctx context.Context) *refreshTokenModelDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refreshTokenModelDo) ReadDB() *refreshTokenModelDo {
	return r.Clauses(dbresolver.Read)
}

func (r refreshTokenModelDo) WriteDB() *refreshTokenModelDo {
	return r.Clauses(dbresolver.Write)
}

func (r refreshTokenModelDo) Session(config *gorm.Session) *refreshTokenModelDo {
	return r.withDO(r.DO.Session(config))
}

func (r refreshTokenModelDo) Clauses(conds ...clause.Expression) *refreshTokenModelDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refreshTokenModelDo) Returning(value interface{}, columns ...string) *refreshTokenModelDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refreshTokenModelDo) Not(conds ...gen.Condition) *refreshTokenModelDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refreshTokenModelDo) Or(conds ...gen.Condition) *refreshTokenModelDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refreshTokenModelDo) Select(conds ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refreshTokenModelDo) Where(conds ...gen.Condition) *refreshTokenModelDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refreshTokenModelDo) Order(conds ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refreshTokenModelDo) Distinct(cols ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refreshTokenModelDo) Omit(cols ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refreshTokenModelDo) Join(table schema.Tabler, on ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refreshTokenModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refreshTokenModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refreshTokenModelDo) Group(cols ...field.Expr) *refreshTokenModelDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refreshTokenModelDo) Having(conds ...gen.Condition) *refreshTokenModelDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refreshTokenModelDo) Limit(limit int) *refreshTokenModelDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refreshTokenModelDo) Offset(offset int) *refreshTokenModelDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refreshTokenModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refreshTokenModelDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refreshTokenModelDo) Unscoped() *refreshTokenModelDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refreshTokenModelDo) Create(values ...*model.RefreshTokenModel) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refreshTokenModelDo) CreateInBatches(values []*model.RefreshTokenModel, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refreshTokenModelDo) Save(values ...*model.RefreshTokenModel) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refreshTokenModelDo) First() (*model.RefreshTokenModel, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshTokenModel), nil
	}
}

func (r refreshTokenModelDo) Take() (*model.RefreshTokenModel, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshTokenModel), nil
	}
}

func (r refreshTokenModelDo) Last() (*model.RefreshTokenModel, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshTokenModel), nil
	}
}

func (r refreshTokenModelDo) Find() ([]*model.RefreshTokenModel, error) {
	result, err := r.DO.Find()
	return result.([]*model.RefreshTokenModel), err
}

func (r refreshTokenModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RefreshTokenModel, err error) {
	buf := make([]*model.RefreshTokenModel, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refreshTokenModelDo) FindInBatches(result *[]*model.RefreshTokenModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refreshTokenModelDo) Attrs(attrs ...field.AssignExpr) *refreshTokenModelDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refreshTokenModelDo) Assign(attrs ...field.AssignExpr) *refreshTokenModelDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refreshTokenModelDo) Joins(fields ...field.RelationField) *refreshTokenModelDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refreshTokenModelDo) Preload(fields ...field.RelationField) *refreshTokenModelDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refreshTokenModelDo) FirstOrInit() (*model.RefreshTokenModel, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshTokenModel), nil
	}
}

func (r refreshTokenModelDo) FirstOrCreate() (*model.RefreshTokenModel, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshTokenModel), nil
	}
}

func (r refreshTokenModelDo) FindByPage(offset int, limit int) (result []*model.RefreshTokenModel, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refreshTokenModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refreshTokenModelDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refreshTokenModelDo) Delete(models ...*model.RefreshTokenModel) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refreshTokenModelDo) withDO(do gen.Dao) *refreshTokenModelDo {
	r.DO = *do.(*gen.DO)
	return r
}

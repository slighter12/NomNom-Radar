name: Go CI Workflow

on:
  push:
    branches: 
      - main 
  pull_request:
    branches: 
      - main 
  workflow_dispatch:

env:
  GO_VERSION: stable
  GOLANGCI_LINT_VERSION: v2.1
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          # Get tag with fallback to commit hash
          if git describe --tags --abbrev=0 2>/dev/null; then
            echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi
          
          # Get lowercase repository name for Docker image
          echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        id: set-vars

      - name: Set up stable Go version
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get dependencies
        run: |
          go mod tidy
          go mod download

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Lint
        run: |
          go vet ./...
          go fmt ./...
          golangci-lint run

      - name: Build Docker Image
        run: |
          DOCKER_BUILDKIT=1 docker build \
          --build-arg VERSION=${{ steps.set-vars.outputs.TAG }} \
          --build-arg BUILT=$(date -Iseconds) \
          --build-arg GIT_COMMIT=$(git rev-parse HEAD) \
          --build-arg IMAGE_NAME=${{ steps.set-vars.outputs.IMAGE_NAME }} \
          --platform linux/amd64 \
          --no-cache \
          -t ${{ steps.set-vars.outputs.IMAGE_NAME }}:${{ steps.set-vars.outputs.TAG }} .

      - name: Run Tests in Docker
        run: |
          docker run --rm ${{ steps.set-vars.outputs.IMAGE_NAME }}:${{ steps.set-vars.outputs.TAG }} make test

      - name: Deploy the application
        run: |
          echo "Deploying the application..."
          docker tag ${{ steps.set-vars.outputs.IMAGE_NAME }}:${{ steps.set-vars.outputs.TAG }} ${{ env.REGISTRY }}/${{ steps.set-vars.outputs.IMAGE_NAME }}:${{ steps.set-vars.outputs.TAG }}
          docker push ${{ env.REGISTRY }}/${{ steps.set-vars.outputs.IMAGE_NAME }}:${{ steps.set-vars.outputs.TAG }}
